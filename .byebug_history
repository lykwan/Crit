c
num_remaining
condi.min_num_people > num_remaining
condi.min_num_people
condi
c
condi.nil?
condi
q
c
n
c
n
condi
n
condi.min_num_people
n
condi
n
condi
c
q
continue
c
q
n
q
n
q
is_all_satisfied
n
eliminate_condition_responses.length
eliminate_condition_responses
n
c
is_all_satisfied
n
eliminate_condition_responses.length == 0
n
eliminate_condition_responses
n
q
c
q
continue
c
n
eliminate_dependencies_responses[response.respondee.id].nil?
n
eliminate_dependencies_responses[response.respondee.id].nil?
n
eliminate_dependencies_responses[response.respondee.id].nil?
eliminate_dependencies_responses[response.respondee.id].nil
eliminate_dependencies_responses[response.respondee.id]
n
eliminate_dependencies_responses[response.respondee.id]
eliminate_dependencies_responses
c
q
eliminate_dependencies_responses[response.respondee.id]
eliminate_dependencies_responses
response
c
q
c
remaining_potentials
n
remaining_potentials
n
eliminate_condition_responses.length
eliminate_condition_responses
eliminate_hash
n
eliminate_condition_responses
n
q
eliminate_condition_responses
q
eliminate_condition_responses
q
c
cc
c
q
c
remaining_potentials
remaining_potentials.include?(condi.specified_friends[1])
remaining_potentials.include?(condi.specified_friends[0])
condi.specified_friends
condi.specified_friends.all? { |friend| remaining_potentials.include?(friend) }
condi
condi.specified_friends
n
c
q
c
q
c
n
condi.specified_friends
n
c
n
condi.min_num_people > num_remaining
c
condi.min_num_people > num_remaining
num_remaining
condi.min_num_people
condi.nil?
c
condi.nil?
condi
c
continue
condi.nil?
condi
c
reload!
condition
cond
c
n
c
condition
condition.nil?
condition
